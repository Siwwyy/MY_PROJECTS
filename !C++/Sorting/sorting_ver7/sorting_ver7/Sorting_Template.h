// _SORTING_TEMPLATE_H_ standard header
/*
 *			   Copyright (c) by Damian Andrysiak. All rights reserved.
 *							*** WERSJA FINALNA ***
 *						   *** Koniec: //2018 ***
 *							Klasa ma za zadanie:
 *	1.
*/
#ifndef _SORTING_TEMPLATE_H_
#define _SORTING_TEMPLATE_H_
#include <iostream>
#include <string>
#include <fstream>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <time.h>

/*
	OUTSIDE FILES .h/.hpp
*/
#include "Write_Chart.h"
#define STOPWATCH_ON		//defined for turn on the stop watch
#include "StopWatch.h"

class Sorting_Template
{
private:
	/*
		ZMIENNE PRIVATE
	*/
	Write_Chart Chart_Object;
	std::vector<int> vector_to_sort;
	//////////////////////////////////////////////////////////////////////////////
	/*
		KONSTRUKTORY PRIVATE
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		FUNKCJE PRIVATE
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		SETTERY PRIVATE
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		GETTERY PRIVATE
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		OPERATORY PRIVATE
	*/
	//JEDNOARGUMENTOWE

	//////////////////////////////////////////////////////////////////////////////
protected:
	/*
		ZMIENNE PROTECTED
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		KONSTRUKTORY PROTECTED
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		FUNKCJE PUBLIC PROTECTED
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		SETTERY PROTECTED
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		GETTERY PROTECTED
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		OPERATORY PROTECTED
	*/
	//JEDNOARGUMENTOWE

	//////////////////////////////////////////////////////////////////////////////
public:
	enum TYPE_OF_SORTING
	{
		BUBBLE_SORT = 0,
		QUICK_SORT = 0,
		MERGE_SORT = 0
	};
	/*
		ZMIENNE PUBLIC
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		KONSTRUKTORY PUBLIC
	*/
	Sorting_Template();
	//////////////////////////////////////////////////////////////////////////////
	/*
		FUNKCJE PUBLIC
	*/
	void choose_type_of_sorting(enum Sorting_Template::TYPE_OF_SORTING SORTING_TYPE);
	void bubble_sort();
	void quick_sort(std::vector<int> & array_type, int left, int right);
	void merge_sort(std::vector<int> & array_type, int begin, int end);
	void merge(std::vector<int> & array_type, int begin, int center, int end);
	//////////////////////////////////////////////////////////////////////////////
	/*
		SETTERY PUBLIC
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		GETTERY PUBLIC
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		OPERATORY PUBLIC
	*/
	//JEDNOARGUMENTOWE

	//////////////////////////////////////////////////////////////////////////////
	/*
		DESTRUKTOR
	*/
	virtual ~Sorting_Template();		//wirtualny destruktor
	//////////////////////////////////////////////////////////////////////////////
};

#endif /* _SORTING_TEMPLATE_H_ */